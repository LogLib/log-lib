//generated by loglib
import { db } from "@/server/db"
import { ApiRequest } from "@loglib/core"
import { createServerRoutes } from "@loglib/next"
import { kv } from "@vercel/kv"

import { siteConfig } from "@/config/site"
import { kyselyAdapter } from "@/lib/db/kysely-adapter"
import { getHost } from "@/lib/utils"

export const { POST, OPTIONS } = createServerRoutes({
  adapter: kyselyAdapter(db),
  disableLocation: process.env.NODE_ENV === "development" ? true : false,
  environment: process.env.NODE_ENV === "development" ? "test" : "production",
  middleware: async (req, options, next) => {
    const { websiteId } = req.method === "GET" ? req.query : req.body
    if (!websiteId) {
      return {
        message: "WebsiteId not specified",
        code: 400,
      }
    }
    const id = websiteId
    if (req.method === "POST") {
      const site = await db
        .selectFrom("website")
        .where("id", "=", id)
        .select("id")
        .select("url")
        .executeTakeFirst()
      if (!site) {
        return {
          message: "Website not found",
          code: 400,
        }
      }
    }
    return await next(req, options)
  },
})

async function checkOrigin(
  req: ApiRequest<
    {
      host?: string
      sdkVersion?: string
      path: string
      data: { host?: string }
      sessionId: string
    },
    // rome-ignore lint/suspicious/noExplicitAny: <explanation>
    any
  >,
  url: string
) {
  //host and sdkVersion is added with every request since sdkVersion 0.5.0
  if (req.body.sdkVersion) {
    const hostname =
      process.env.NODE_ENV === "development"
        ? getHost(siteConfig.url)
        : req.body.host && getHost(req.body.host)
    const siteHostname = getHost(url)
    if (hostname && siteHostname && hostname === siteHostname) {
      return true
    }
    return false
  } else {
    if (req.body.path === "/session") {
      if (req.body.data) {
        const origin =
          process.env.NODE_ENV === "development"
            ? siteConfig.url
            : (req.body.data.host as string | undefined)
        const sessionId = req.body.sessionId as string | undefined
        const hostname = origin && getHost(origin)
        const siteHostname = getHost(url)
        const isValidOrigin =
          hostname && siteHostname && hostname === siteHostname
        if (!origin || !sessionId || !isValidOrigin) {
          return false
        }
        await kv.set(sessionId, origin)
        return true
      } else {
        return false
      }
    } else {
      const origin = (await kv.get(req.body?.sessionId as string)) as
        | string
        | undefined
      console.log(origin, "origin")
      if (!origin || getHost(url) !== getHost(origin)) {
        return false
      }
      return true
    }
  }
}
